#! /bin/zsh

function tb_conda()
{
	
	echo ''
	echo 'loading conda'

	# >>> conda initialize >>>
	# !! Contents within this block are managed by 'conda init' !!
	__conda_setup="$('/Users/daeda/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
		eval "$__conda_setup"
	else
		if [ -f "/om2/user/daeda/software/anaconda3/etc/profile.d/conda.sh" ]; then
			. "/om2/user/daeda/software/anaconda3/etc/profile.d/conda.sh"
		else
			export PATH="/om2/user/daeda/software/anaconda3/bin:$PATH"
		fi
	fi
	unset __conda_setup
	# <<< conda initialize <<<

	echo ''
	echo ">>>conda version:"
	which conda
	conda -V
}

function tb_matlab()
{
	echo ''
	echo 'loading matlab functions'

	source /usr/share/Modules/init/bash
	source /usr/share/Modules/init/zsh

	module add mit/matlab/2018a
	alias matlabcl="matlab -nodesktop -nosplash -nodisplay -singleCompThread"
	alias matlabclgreedy="matlab -nodesktop -nosplash -nodisplay"

	echo ''
	echo 'PATH:'
	echo "$PATH"
	echo ''
	echo ''
}

function tb_webppl()
{
	echo ''
	echo 'loading webppl functions'

	echo ''
	echo 'loading NVM'

	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

	echo ''
	echo 'loading node'

	# export PATH="/om2/user/daeda/software/node-v6.10.3-linux-x64/bin/:$PATH"
	export PATH="/om2/user/daeda/software/node-v10.16.3-linux-x64/bin/:$PATH"

	echo ">>>node version:"
	npm version
	echo ">>>WebPPL version:"
	npm list -g webppl
	echo ">>>WebPPL version:"
	webppl --version

	tb_conda

	echo ''
	echo 'PATH:'
	echo "$PATH"
	echo ''
	echo ''
}

function tb_fmriprep()
{
	echo ''
	echo 'loading fmriprep functions'

	source /usr/share/Modules/init/bash
	source /usr/share/Modules/init/zsh

	module add openmpi/gcc/64/1.8.1
	module add openmind/singularity/3.0.3

	echo "$PATH"
	echo ''
	echo ''
}

function tb_nipype()
{
	# load the 'module' command for the current shell
	source /usr/share/Modules/init/bash
	source /usr/share/Modules/init/zsh

	tb_conda
	echo 'loading nipype functions'

	conda activate niconda

	tb_matlab

	# Needed for nipype
	export SPM_PATH="/om2/user/daeda/software/spm12"
	
	module add openmind/gcc/5.3.0
	module add openmind/ants/2.1.0-3.8bed08
	module add openmind/afni/2016.03.08
	module add openmind/slicer/4.6.2

	###SYSTEM FSL
	# module add openmind/fsl/5.0.9 

	###CUSTOM FSL
	# FSL Setup -- saxelab custom
	FSLDIR=/om3/group/saxelab/software/fsl
	PATH=${FSLDIR}/bin:${PATH}
	export FSLDIR PATH
	. ${FSLDIR}/etc/fslconf/fsl.sh
	
	###SYSTEM freesurfer
	# module add openmind/freesurfer/6.0.0

	###CUSTOM freesurfer
	export FREESURFER_HOME=/om2/user/daeda/software/freesurfer ### 6.0.1
	source $FREESURFER_HOME/SetUpFreeSurfer.sh
	export FS_LICENSE='/gablab/p/ADHDER/data/adhder/code/license.txt'
	echo "set default number of threads using:"
	echo "export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=2"
	echo ""
	echo "remember to >>export FREESURFER_HOME=<subjects_dir><< before use"
	echo ""

	echo "$PATH"
	echo ''
	echo ''

	function nicrash()
	{
		#echo "The script you are running has basename `basename $0`, dirname `dirname $0`"
		#echo "The present working directory is `pwd`"
		echo ''
		dir=$(pwd)
		echo "dir== $dir"
		unset -v latest
		  for file in "$dir"/crash-*.pklz; do
		  [[ $file -nt $latest ]] && latest=$file
		done

		echo "nipypecli crash $latest"

		nipypecli crash "$latest"
	}
}

function launchkernel_iaa()
{
	cd "/om/user/daeda/ite_iaa/ite_gb_inverseappraisal/code/" || exit 
	slurmout="$(sbatch launch_remote_kernel.sbatch)"
	echo "${slurmout}"
	numeric_string_only=${slurmout//[^0-9]/}
	# echo "${numeric_string_only}"
	logfile="../logs/jupyter-log-${numeric_string_only}.txt"
	while ! [ -f "${logfile}" ]; do
		printf "#"
		sleep 2
	done
	tail -f -n 70 "${logfile}"
}

function launchkernel_iaa_bigmem()
{
	cd "/om/user/daeda/ite_iaa/ite_gb_inverseappraisal/code/" || exit 
	slurmout="$(sbatch launch_remote_kernel_bigmem.sbatch)"
	echo "${slurmout}"
	numeric_string_only=${slurmout//[^0-9]/}
	# echo "${numeric_string_only}"
	logfile="../logs/jupyter-log-${numeric_string_only}.txt"
	while ! [ -f "${logfile}" ]; do
		printf "#"
		sleep 2
	done
	tail -f -n 70 "${logfile}"
}

function launchkernel_adhder()
{
	cd "/gablab/p/ADHDER/data/adhder/code/analysis/" || exit 
	slurmout="$(sbatch launch_remote_kernel.sbatch)"
	echo "${slurmout}"
	numeric_string_only=${slurmout//[^0-9]/}
	# echo "${numeric_string_only}"
	logfile="logs/jupyter-log-${numeric_string_only}.txt"
	while ! [ -f "${logfile}" ]; do
		printf "#"
		sleep 2
	done
	tail -f -n 70 "${logfile}"
}

